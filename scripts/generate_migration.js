const fs = require("fs")
const path = require("path")

// Read the JSON dump
const dumpPath = path.join(__dirname, "..", "database_dump.json")
const dump = JSON.parse(fs.readFileSync(dumpPath, "utf8"))

// Start building the migration SQL
let sql = `-- Drop all existing tables
DROP TABLE IF EXISTS activities CASCADE;
DROP TABLE IF EXISTS supporting_series CASCADE;
DROP TABLE IF EXISTS local_attractions CASCADE;
DROP TABLE IF EXISTS podium_results CASCADE;
DROP TABLE IF EXISTS circuit_details CASCADE;
DROP TABLE IF EXISTS airports CASCADE;
DROP TABLE IF EXISTS ticket_pricing CASCADE;
DROP TABLE IF EXISTS tickets CASCADE;
DROP TABLE IF EXISTS saved_itineraries CASCADE;
DROP TABLE IF EXISTS races CASCADE;
DROP TABLE IF EXISTS circuits CASCADE;

-- Create circuits table
CREATE TABLE IF NOT EXISTS circuits (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  location TEXT NOT NULL,
  country TEXT NOT NULL,
  latitude NUMERIC(10,7) NOT NULL,
  longitude NUMERIC(10,7) NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Create races table
CREATE TABLE IF NOT EXISTS races (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  circuit_id UUID NOT NULL REFERENCES circuits(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  date TIMESTAMP WITH TIME ZONE NOT NULL,
  season INTEGER NOT NULL,
  round INTEGER NOT NULL,
  country TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Create saved_itineraries table
CREATE TABLE IF NOT EXISTS saved_itineraries (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  user_id TEXT NOT NULL,
  race_id UUID NOT NULL REFERENCES races(id) ON DELETE CASCADE,
  itinerary JSONB NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Create tickets table
CREATE TABLE IF NOT EXISTS tickets (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  race_id UUID NOT NULL REFERENCES races(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  description TEXT NOT NULL,
  ticket_type TEXT NOT NULL,
  availability TEXT NOT NULL,
  days_included JSONB NOT NULL,
  is_child_ticket BOOLEAN NOT NULL DEFAULT false,
  reseller_url TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  updated_by TEXT
);

-- Create ticket_pricing table
CREATE TABLE IF NOT EXISTS ticket_pricing (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  ticket_id INTEGER NOT NULL REFERENCES tickets(id) ON DELETE CASCADE,
  price DECIMAL(10,2) NOT NULL,
  currency TEXT NOT NULL,
  valid_from TIMESTAMP WITH TIME ZONE NOT NULL,
  valid_to TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  updated_by TEXT
);

-- Create airports table
CREATE TABLE IF NOT EXISTS airports (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  circuit_id UUID NOT NULL REFERENCES circuits(id) ON DELETE CASCADE,
  code TEXT NOT NULL,
  name TEXT NOT NULL,
  distance TEXT NOT NULL,
  transfer_time TEXT NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now()
);

-- Create circuit_details table
CREATE TABLE IF NOT EXISTS circuit_details (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  circuit_id UUID NOT NULL REFERENCES circuits(id) ON DELETE CASCADE,
  length DECIMAL(10,3) NOT NULL,
  corners INTEGER NOT NULL,
  drs_zones INTEGER NOT NULL,
  lap_record_time TEXT,
  lap_record_year INTEGER,
  lap_record_driver TEXT,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now()
);

-- Create podium_results table
CREATE TABLE IF NOT EXISTS podium_results (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  circuit_id UUID NOT NULL REFERENCES circuits(id) ON DELETE CASCADE,
  position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 3),
  driver TEXT NOT NULL,
  team TEXT NOT NULL,
  year INTEGER NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now()
);

-- Create local_attractions table
CREATE TABLE IF NOT EXISTS local_attractions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  circuit_id UUID NOT NULL REFERENCES circuits(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  description TEXT NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now()
);

-- Create supporting_series table
CREATE TABLE IF NOT EXISTS supporting_series (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  race_id UUID NOT NULL REFERENCES races(id) ON DELETE CASCADE,
  series TEXT NOT NULL,
  round INTEGER NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now()
);

-- Create activities table
CREATE TABLE IF NOT EXISTS activities (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  itinerary_id INTEGER NOT NULL REFERENCES saved_itineraries(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  type TEXT NOT NULL,
  price_amount DECIMAL(10,2),
  price_currency TEXT,
  rating DECIMAL(3,1),
  category TEXT,
  distance TEXT,
  duration TEXT,
  location_lat DECIMAL(10,8),
  location_lng DECIMAL(11,8),
  time_slot TEXT,
  description TEXT,
  visit_duration TEXT,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now()
);

-- Add triggers to update updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_circuits_updated_at
    BEFORE UPDATE ON circuits
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_races_updated_at
    BEFORE UPDATE ON races
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_saved_itineraries_updated_at
    BEFORE UPDATE ON saved_itineraries
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_tickets_updated_at
    BEFORE UPDATE ON tickets
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_ticket_pricing_updated_at
    BEFORE UPDATE ON ticket_pricing
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_airports_updated_at
    BEFORE UPDATE ON airports
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_circuit_details_updated_at
    BEFORE UPDATE ON circuit_details
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_podium_results_updated_at
    BEFORE UPDATE ON podium_results
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_local_attractions_updated_at
    BEFORE UPDATE ON local_attractions
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_supporting_series_updated_at
    BEFORE UPDATE ON supporting_series
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_activities_updated_at
    BEFORE UPDATE ON activities
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Create temporary tables for data migration
CREATE TEMPORARY TABLE races_old (
  id INTEGER,
  name TEXT,
  circuit TEXT,
  country TEXT,
  date TIMESTAMP WITH TIME ZONE,
  image_url TEXT,
  description TEXT,
  transport_info JSONB,
  weather_info JSONB,
  nearest_airports JSONB,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  schedule JSONB,
  ticket_info JSONB,
  circuit_info JSONB,
  last_year_podium JSONB,
  track_map_url TEXT,
  status TEXT,
  slug TEXT,
  local_attractions JSONB,
  suggested_itineraries JSONB,
  availability TEXT,
  price DECIMAL(10,2),
  season TEXT,
  supporting_series JSONB,
  is_sprint_weekend BOOLEAN,
  weekend_start TIMESTAMP WITH TIME ZONE,
  weekend_end TIMESTAMP WITH TIME ZONE
);

CREATE TEMPORARY TABLE saved_itineraries_old (
  id INTEGER,
  race_id INTEGER,
  user_id INTEGER,
  name TEXT,
  activities JSONB,
  created_at TIMESTAMP WITH TIME ZONE,
  share_token TEXT,
  date TIMESTAMP WITH TIME ZONE
);

-- Insert races data
`

// Function to escape single quotes in SQL strings
function escapeSql(str) {
  if (typeof str !== "string") return str
  return str.replace(/'/g, "''")
}

// Insert races data
dump.races.forEach(race => {
  sql += `INSERT INTO races_old VALUES (
    ${race.id},
    '${escapeSql(race.name)}',
    '${escapeSql(race.circuit)}',
    '${escapeSql(race.country)}',
    '${race.date}',
    ${race.image_url ? `'${escapeSql(race.image_url)}'` : "NULL"},
    ${race.description ? `'${escapeSql(race.description)}'` : "NULL"},
    ${race.transport_info ? `'${escapeSql(JSON.stringify(race.transport_info))}'::jsonb` : "NULL"},
    ${race.weather_info ? `'${escapeSql(JSON.stringify(race.weather_info))}'::jsonb` : "NULL"},
    ${race.nearest_airports ? `'${escapeSql(JSON.stringify(race.nearest_airports))}'::jsonb` : "NULL"},
    ${race.city ? `'${escapeSql(race.city)}'` : "NULL"},
    ${race.latitude ? `'${escapeSql(race.latitude)}'` : "NULL"},
    ${race.longitude ? `'${escapeSql(race.longitude)}'` : "NULL"},
    ${race.schedule ? `'${escapeSql(JSON.stringify(race.schedule))}'::jsonb` : "NULL"},
    ${race.ticket_info ? `'${escapeSql(JSON.stringify(race.ticket_info))}'::jsonb` : "NULL"},
    ${race.circuit_info ? `'${escapeSql(JSON.stringify(race.circuit_info))}'::jsonb` : "NULL"},
    ${race.last_year_podium ? `'${escapeSql(JSON.stringify(race.last_year_podium))}'::jsonb` : "NULL"},
    ${race.track_map_url ? `'${escapeSql(race.track_map_url)}'` : "NULL"},
    ${race.status ? `'${escapeSql(race.status)}'` : "NULL"},
    ${race.slug ? `'${escapeSql(race.slug)}'` : "NULL"},
    ${race.local_attractions ? `'${escapeSql(JSON.stringify(race.local_attractions))}'::jsonb` : "NULL"},
    ${race.suggested_itineraries ? `'${escapeSql(JSON.stringify(race.suggested_itineraries))}'::jsonb` : "NULL"},
    ${race.availability ? `'${escapeSql(race.availability)}'` : "NULL"},
    ${race.price || "NULL"},
    ${race.season ? `'${escapeSql(race.season)}'` : "NULL"},
    ${race.supporting_series ? `'${escapeSql(JSON.stringify(race.supporting_series))}'::jsonb` : "NULL"},
    ${race.is_sprint_weekend || false},
    ${race.weekend_start ? `'${race.weekend_start}'` : "NULL"},
    ${race.weekend_end ? `'${race.weekend_end}'` : "NULL"}
  );\n`
})

// Insert saved itineraries data
dump.saved_itineraries.forEach(itinerary => {
  sql += `INSERT INTO saved_itineraries_old VALUES (
    ${itinerary.id},
    ${itinerary.race_id},
    ${itinerary.user_id},
    ${itinerary.name ? `'${escapeSql(itinerary.name)}'` : "NULL"},
    ${itinerary.activities ? `'${escapeSql(JSON.stringify(itinerary.activities))}'::jsonb` : "NULL"},
    ${itinerary.created_at ? `'${itinerary.created_at}'` : "NULL"},
    ${itinerary.share_token ? `'${escapeSql(itinerary.share_token)}'` : "NULL"},
    ${itinerary.date ? `'${itinerary.date}'` : "NULL"}
  );\n`
})

// Add the data migration logic
sql += `
-- First, insert the circuits data
INSERT INTO circuits (name, location, country, latitude, longitude)
SELECT DISTINCT 
    circuit,
    COALESCE(city, 'Unknown'),
    country,
    CAST(NULLIF(latitude, '') AS NUMERIC(10,7)),
    CAST(NULLIF(longitude, '') AS NUMERIC(10,7))
FROM races_old
WHERE circuit IS NOT NULL;

-- Insert races data
INSERT INTO races (id, name, country, date, season, round, circuit_id)
SELECT 
    gen_random_uuid(),
    ro.name,
    ro.country,
    ro.date,
    EXTRACT(YEAR FROM ro.date),
    ROW_NUMBER() OVER (PARTITION BY EXTRACT(YEAR FROM ro.date) ORDER BY ro.date),
    c.id
FROM races_old ro
JOIN circuits c ON ro.circuit = c.name;

-- Insert saved itineraries
INSERT INTO saved_itineraries (id, user_id, race_id, itinerary, created_at, updated_at)
SELECT 
    si.id,
    si.user_id::text,
    r.id as race_id,
    '[]'::jsonb as itinerary,
    si.created_at,
    si.date as updated_at
FROM saved_itineraries_old si
JOIN races_old ro ON si.race_id = ro.id
JOIN races r ON r.name = ro.name;

-- Insert activities
INSERT INTO activities (
    itinerary_id,
    name,
    type,
    price_amount,
    price_currency,
    rating,
    category,
    distance,
    duration,
    location_lat,
    location_lng,
    time_slot,
    description,
    visit_duration
)
SELECT 
    si.id as itinerary_id,
    COALESCE((a->>'name')::text, 'Unknown') as name,
    COALESCE((a->>'type')::text, 'other') as type,
    CAST(NULLIF((a->'price'->>'amount')::text, '') AS DECIMAL(10,2)),
    (a->'price'->>'currency')::text as price_currency,
    CAST(NULLIF((a->>'rating')::text, '') AS DECIMAL(3,1)),
    COALESCE((a->>'category')::text, 'other') as category,
    COALESCE((a->>'distance')::text, 'Unknown') as distance,
    COALESCE((a->>'duration')::text, 'Unknown') as duration,
    CAST(NULLIF((a->'location'->>'lat')::text, '') AS DECIMAL(10,8)),
    CAST(NULLIF((a->'location'->>'lng')::text, '') AS DECIMAL(11,8)),
    COALESCE((a->>'timeSlot')::text, 'Unknown') as time_slot,
    COALESCE((a->>'description')::text, 'No description available') as description,
    COALESCE((a->>'visitDuration')::text, 'Unknown') as visit_duration
FROM saved_itineraries_old si
CROSS JOIN LATERAL jsonb_array_elements(si.activities) as a
WHERE si.activities IS NOT NULL AND si.activities != 'null'::jsonb;

-- Insert airports data
INSERT INTO airports (circuit_id, code, name, distance, transfer_time)
SELECT DISTINCT
    c.id as circuit_id,
    COALESCE((a->>'code')::text, 'Unknown') as code,
    COALESCE((a->>'name')::text, 'Unknown') as name,
    COALESCE((a->>'distance')::text, 'Unknown') as distance,
    COALESCE((a->>'transferTime')::text, 'Unknown') as transfer_time
FROM races_old r
CROSS JOIN LATERAL jsonb_array_elements(r.nearest_airports) as a
JOIN circuits c ON r.circuit = c.name
WHERE r.nearest_airports IS NOT NULL AND r.nearest_airports != 'null'::jsonb;

-- Insert circuit details
INSERT INTO circuit_details (circuit_id, length, corners, drs_zones, lap_record_time, lap_record_year, lap_record_driver)
SELECT DISTINCT
    c.id as circuit_id,
    CAST(REGEXP_REPLACE((r.circuit_info->>'length')::text, '[^0-9.]', '', 'g') AS DECIMAL(10,3)),
    CAST((r.circuit_info->>'corners')::text AS INTEGER),
    CAST((r.circuit_info->>'drsZones')::text AS INTEGER),
    ((r.circuit_info->'lapRecord'->>'time')::text),
    CAST((r.circuit_info->'lapRecord'->>'year')::text AS INTEGER),
    ((r.circuit_info->'lapRecord'->>'driver')::text)
FROM races_old r
JOIN circuits c ON r.circuit = c.name
WHERE r.circuit_info IS NOT NULL AND r.circuit_info != 'null'::jsonb;

-- Insert podium results
INSERT INTO podium_results (circuit_id, position, driver, team, year)
SELECT 
    c.id as circuit_id,
    1 as position,
    (r.last_year_podium->'first'->>'driver')::text as driver,
    (r.last_year_podium->'first'->>'team')::text as team,
    EXTRACT(YEAR FROM r.date) as year
FROM races_old r
JOIN circuits c ON r.circuit = c.name
WHERE r.last_year_podium IS NOT NULL AND r.last_year_podium != 'null'::jsonb
AND r.last_year_podium->'first' IS NOT NULL
UNION ALL
SELECT 
    c.id as circuit_id,
    2 as position,
    (r.last_year_podium->'second'->>'driver')::text as driver,
    (r.last_year_podium->'second'->>'team')::text as team,
    EXTRACT(YEAR FROM r.date) as year
FROM races_old r
JOIN circuits c ON r.circuit = c.name
WHERE r.last_year_podium IS NOT NULL AND r.last_year_podium != 'null'::jsonb
AND r.last_year_podium->'second' IS NOT NULL
UNION ALL
SELECT 
    c.id as circuit_id,
    3 as position,
    (r.last_year_podium->'third'->>'driver')::text as driver,
    (r.last_year_podium->'third'->>'team')::text as team,
    EXTRACT(YEAR FROM r.date) as year
FROM races_old r
JOIN circuits c ON r.circuit = c.name
WHERE r.last_year_podium IS NOT NULL AND r.last_year_podium != 'null'::jsonb
AND r.last_year_podium->'third' IS NOT NULL;

-- Insert local attractions
INSERT INTO local_attractions (circuit_id, name, description)
SELECT DISTINCT
    c.id as circuit_id,
    (a->>'name')::text as name,
    (a->>'description')::text as description
FROM races_old r
CROSS JOIN LATERAL jsonb_array_elements(r.local_attractions) as a
JOIN circuits c ON r.circuit = c.name
WHERE r.local_attractions IS NOT NULL AND r.local_attractions != 'null'::jsonb;

-- Insert supporting series
INSERT INTO supporting_series (race_id, series, round)
SELECT 
    r2.id as race_id,
    (s->>'series')::text as series,
    CAST((s->>'round')::text AS INTEGER) as round
FROM races_old r
CROSS JOIN LATERAL jsonb_array_elements(r.supporting_series) as s
JOIN races r2 ON r2.name = r.name
WHERE r.supporting_series IS NOT NULL AND r.supporting_series != 'null'::jsonb;

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_airports_circuit_id ON airports(circuit_id);
CREATE INDEX IF NOT EXISTS idx_airports_code ON airports(code);

CREATE INDEX IF NOT EXISTS idx_circuit_details_circuit_id ON circuit_details(circuit_id);

CREATE INDEX IF NOT EXISTS idx_podium_results_circuit_id ON podium_results(circuit_id);
CREATE INDEX IF NOT EXISTS idx_podium_results_driver ON podium_results(driver);
CREATE INDEX IF NOT EXISTS idx_podium_results_team ON podium_results(team);
CREATE INDEX IF NOT EXISTS idx_podium_results_year ON podium_results(year);

CREATE INDEX IF NOT EXISTS idx_local_attractions_circuit_id ON local_attractions(circuit_id);

CREATE INDEX IF NOT EXISTS idx_supporting_series_race_id ON supporting_series(race_id);
CREATE INDEX IF NOT EXISTS idx_supporting_series_series ON supporting_series(series);

CREATE INDEX IF NOT EXISTS idx_activities_itinerary_id ON activities(itinerary_id);
CREATE INDEX IF NOT EXISTS idx_activities_type ON activities(type);
CREATE INDEX IF NOT EXISTS idx_activities_category ON activities(category);

-- Drop temporary tables
DROP TABLE IF EXISTS races_old;
DROP TABLE IF EXISTS saved_itineraries_old;
`

// Write the migration file
const timestamp = new Date()
  .toISOString()
  .replace(/[^0-9]/g, "")
  .slice(0, 14)
const migrationPath = path.join(
  __dirname,
  "..",
  "supabase",
  "migrations",
  `${timestamp}_full_migration.sql`
)
fs.writeFileSync(migrationPath, sql)

console.log(`Migration file created at: ${migrationPath}`)
